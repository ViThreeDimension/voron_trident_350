;Use this start command in your SuperSlicer PRINT_START BED=[first_layer_bed_temperature] EXTRUDER=[first_layer_temperature] FILAMENT_TYPE=[filament_type] EXTRAOFFSET=0 SOAK=-1 NEVERMOREFANSPEED=-1 FL_SIZE={first_layer_print_min[0]}_{first_layer_print_min[1]}_{first_layer_print_max[0]}_{first_layer_print_max[1]}
[gcode_macro PRINT_START]
description: PRINT_START BED=100 EXTRUDER=240 FILAMENT_TYPE=none EXTRAOFFSET=0 SOAK=-1 NEVERMOREFANSPEED=-1 FL_SIZE=5_5_345_345
  EXTRAOFFSET: Textured plate = -0.04
gcode:
  {% set BED = params.BED|default(100)|float %}
  {% set EXTRUDER = params.EXTRUDER|default(240)|float %}
  {% set FILAMENT_TYPE = params.FILAMENT_TYPE|default("none")|string %}
  {% set SOAK = params.SOAK|default(-1)|float %}
  {% set EXTRAOFFSET = params.EXTRAOFFSET|default(0)|float %}
  {% set NEVERMORE_FAN_SPEED = params.NEVERMOREFANSPEED|default(-1) %}
  {% set FL_SIZE = params.FL_SIZE|default("5_5_345_345")|string %}

  ; display print start values
  SHOW TEXT='PRINT_START BED={BED} EXTRUDER={EXTRUDER} FILAMENT_TYPE={FILAMENT_TYPE} EXTRAOFFSET={EXTRAOFFSET} SOAK={SOAK} NEVERMOREFANSPEED={NEVERMORE_FAN_SPEED} FL_SIZE={FL_SIZE}'

  CASELIGHT POWER=1
  BED_MESH_CLEAR   

  M106 S255          ; set print fan to full speed to avoid melting fan ducts
  M104 S{EXTRUDER}   ; pre-heat nozzle non-blocking
  M140 S{BED}        ; Pre-heat bed non-blocking

  CG28               ; Home all axes

  SHOW TEXT='Heating bed...'
  M190 S{BED}        ; heat bed blocking
  SET_NEVERMORE_SPEED SPEED={NEVERMORE_FAN_SPEED} FILAMENT_TYPE={FILAMENT_TYPE}

  WAIT_AND_CLEAN_NOZZLE DURATION={SOAK} FILAMENT_TYPE={FILAMENT_TYPE}

  SHOW TEXT='Quad Gantry Level'
  Z_TILT_ADJUST

  SHOW TEXT='Bed Mesh'
  ADAPTIVE_BED_MESH SIZE={FL_SIZE}

  SHOW TEXT='Heating Extruder'
  M109 S{EXTRUDER}          ; Set and wait for nozzle to reach temperature
  CLEAN_NOZZLE PURGE=false  ; clean nozzle

  SHOW TEXT='Calibrate Z'
  CALIBRATE_Z

  # Apply extra offset for textured plate or temperature
  {% if EXTRAOFFSET<0.2 and EXTRAOFFSET>-0.2 %}
    M118 EXTRAOFFSET applied: {EXTRAOFFSET}
    SET_GCODE_OFFSET Z_ADJUST={EXTRAOFFSET} MOVE=1
  {% endif %}

  CLEAN_NOZZLE PURGE=true  ; purge filament

  G90                         ; Use absolute coordinates
  
  TOOLHEAD_TO_START SIZE={FL_SIZE}

  SHOW TEXT='Print Started'

[gcode_macro TOOLHEAD_TO_START]
description: Move toolhead to zero, then lower at the xmin/ymin of the meshed area to start the print
gcode:
  {% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.FL_SIZE.split('_')|map('trim')|map('int') %}
  G0 X0 Y0 Z10 F20000
  G1 X{xMinSpec} Y{yMinSpec} Z1 F3000    


[gcode_macro WAIT_AND_CLEAN_NOZZLE]
description: WAIT_AND_CLEAN_NOZZLE DURATION=-1 FILAMENT_TYPE=PLA
gcode:
  {% set DURATION = params.DURATION|default(-1)|float %}
  {% set FILAMENT_TYPE = params.FILAMENT_TYPE|default("PLA")|string %}
  {% if DURATION == -1 and ('ABS' in FILAMENT_TYPE or 'ASA' in FILAMENT_TYPE) %}
    {% set SOAK = 40 %}
  {% elif DURATION == -1 %}
    {% set SOAK = 20 %}
  {% else %}
    {% set SOAK = DURATION %}
  {% endif %}

  ; Soak printer to let it thermally expand to have a constant first layer 
  {% if (SOAK|int) > 0 %}
    SHOW TEXT='starting Soak'
    {% for timer in range( SOAK|int,0,-1) %}
      # we cycle once a minute, so we can send an update to keep octoprint happy, rather than just sleeping for the entire soak
      SHOW TEXT='Soak: {timer|int}m remaining'
      M105
      ; if factor of 5 clean nozzle
      ; else wait 1 minute
      G4 P60000

      {% if timer%5 == 0 %}
        CG28 ; Conditionnal homing
        CLEAN_NOZZLE PURGE=false  ; clean nozzle
      {% endif %}
          
    {% endfor %}
    CLEAN_NOZZLE PURGE=false  ; clean nozzle
    SHOW TEXT='Soak Complete'
  {% else %}
    CLEAN_NOZZLE PURGE=false  ; clean nozzle
    SHOW TEXT='Soak Skipped'
  {% endif %}
  

[gcode_macro PRINT_END]
description: PRINT_END KEEP_BED_AT=0
gcode:
    {% set BED = params.KEEP_BED_AT|default(0)|float %}
    {% set FILAMENT_TYPE = params.FILAMENT_TYPE|default("none")|string %}
  
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F3600                 ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 F20000                ; move nozzle to remove stringing
    G90                            ; absolute positionning
    G0 X300 Y348 F20000             ; park nozzle at rear
    TURN_OFF_HEATERS
    M140 S{BED}                    ; keep bed heat to chain prints
    M107                           ; turn off fan
    BED_MESH_CLEAR
    M117 Print Complete
  
    PRINT_END_RUN_NEVERMORE FILAMENT_TYPE={FILAMENT_TYPE}
    CASELIGHT POWER=0                     ; kill lights
    

[gcode_macro PRINT_END_RUN_NEVERMORE]
description:  IF ABS or ASA run NEVERMORE 15 Minutes
gcode:
  {% set FILAMENT_TYPE = params.FILAMENT_TYPE|default("none")|string %}
  
  {% if 'ABS' in FILAMENT_TYPE or 'ASA' in FILAMENT_TYPE %}
    SET_NEVERMORE_SPEED SPEED=1
    {% for timer in range( 15|int,0,-1) %}
      # we cycle once a minute, so we can send an update to keep octoprint happy, rather than just sleeping for the entire soak
      SHOW TEXT='AirClean: {timer|int}m remaining'
      M105
      # if factor of 5 clean nozzle
      # else wait 1 minute
      G4 P60000 # Wait 1 minute
    {% endfor %}
  {% endif %}
  SET_NEVERMORE_SPEED SPEED=0

# [gcode_macro PAUSE]
# description: Pause the actual running print
# rename_existing: PAUSE_BASE
# # change this if you need more or less extrusion
# variable_extrude: 1.0
# gcode:
#   ##### read E from pause macro #####
#   {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#   ##### set park positon for x and y #####
#   # default is your max posion from your printer.cfg
#   {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
#   {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
#   ##### calculate save lift position #####
#   {% set max_z = printer.toolhead.axis_maximum.z|float %}
#   {% set act_z = printer.toolhead.position.z|float %}
#   {% if act_z < (max_z - 2.0) %}
#       {% set z_safe = 2.0 %}
#   {% else %}
#       {% set z_safe = max_z - act_z %}
#   {% endif %}
#   ##### end of definitions #####
#   PAUSE_BASE
#   G91
#   {% if printer.extruder.can_extrude|lower == 'true' %}
#     G1 E-{E} F2100
#   {% else %}
#     {action_respond_info("Extruder not hot enough")}
#   {% endif %}
#   {% if "xyz" in printer.toolhead.homed_axes %}
#     G1 Z{z_safe} F900
#     G90
#     G1 X{x_park} Y{y_park} F6000
#   {% else %}
#     {action_respond_info("Printer not homed")}
#   {% endif %} 


# [gcode_macro RESUME]
# description: Resume the actual running print
# rename_existing: RESUME_BASE
# gcode:
#   ##### read E from pause macro #####
#   {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#   #### get VELOCITY parameter if specified ####
#   {% if 'VELOCITY' in params|upper %}
#     {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
#   {%else %}
#     {% set get_params = "" %}
#   {% endif %}
#   ##### end of definitions #####
#   {% if printer.extruder.can_extrude|lower == 'true' %}
#     G91
#     G1 E{E} F2100
#   {% else %}
#     {action_respond_info("Extruder not hot enough")}
#   {% endif %}  
#   RESUME_BASE {get_params}
#   SHOW TEXT='Print Resumed'


# [gcode_macro CANCEL_PRINT]
# description: Cancel the actual running print
# rename_existing: CANCEL_PRINT_BASE
# gcode:
#   PRINT_END
#   TURN_OFF_HEATERS
#   CANCEL_PRINT_BASE

## Display text
[gcode_macro SHOW]
description: SHOW TEXT=<your text> Display information on both screen and logs
gcode:
  {% set TEXT = params.TEXT %}
  M117 {TEXT}
  M118 {TEXT}

## Conditional home
[gcode_macro CG28]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28 RESET_SETTINGS={ params.RESET_SETTINGS|default('true') }
  {% endif %}

# #####################################################################
# #   Macros
# #####################################################################

# [gcode_macro PRINT_START]
# #   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
# gcode:
#     M117 Homing...                 ; display message
#     G28
#     Z_TILT_ADJUST
#     G28

#     ##  Uncomment for for your size printer:
#     #--------------------------------------------------------------------
#     ##  Uncomment for 250mm build
#     #G0 X125 Y125 Z30 F3600

#     ##  Uncomment for 300 build
#     #G0 X150 Y150 Z30 F3600

#     ##  Uncomment for 350mm build
#     #G0 X175 Y175 Z30 F3600
#     #--------------------------------------------------------------------

   

# [gcode_macro PRINT_END]
# #   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
# gcode:
#     # safe anti-stringing move coords
#     {% set th = printer.toolhead %}
#     {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
#     {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
#     {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
#     SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
#     M400                           ; wait for buffer to clear
#     G92 E0                         ; zero the extruder
#     G1 E-2.0 F3600                 ; retract filament
    
#     TURN_OFF_HEATERS
    
#     G90                                      ; absolute positioning
#     G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
#     G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
#     M107                                     ; turn off fan
    
#     BED_MESH_CLEAR
#     RESTORE_GCODE_STATE NAME=STATE_PRINT_END